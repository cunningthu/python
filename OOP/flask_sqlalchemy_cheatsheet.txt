Create table from classes
  db.create_all()

Insert into table example
  flight = Flight(origin="California", destination="Hawaii", duration="145")
  db.session.add(flight)

SELECT * FROM flights;
  Flight.query.all()
  # Where Flight is a class

SELECT * FROM flights WHERE origin = 'Paris';
  Flight.query.filer_by(origin="Paris").all()

SELECT * FROM flights WHERE origin = 'Paris' LIMIT 1;
  Flight.query.filer_by(origin="Paris").first()

SELECT COUNT(*) FROM flights WHERE origin = 'Paris';
  Flight.query.filer_by(origin="Paris").count()

SELECT * FROM flights WHERE id = 28; # USING PRIMARY KEY
  Flight.query.get(28)

UPDATE flights SET duration = 280 WHERE id = 6;
  flight = Flight.query.get(6)
  flight.duration = 280

DELETE FROM flights WHERE id = 28;
  flight = Flight.query.get(28)
  db.session.delete(flight)

COMMIT;
  db.session.commit()

SELECT * FROM flights ORDER BY origin;
  # For ascending order
  Flight.query.order_by(Flight.origin).all()
  # For descending order
  Flight.query.order_by(Flight.origin.desc()).all()

# Inside a filter, you can put in arbitrary boolean expressions

SELECT * FROM flights WHERE origin != "Paris";
  Flight.query.filter(Flight.origin != "Paris").all()

SELECT * FROM flights WHERE origin LIKE "%a%";
  Flight.query.filter(Flight.origin.like("%a%")).all()

SELECT * FROM flights WHERE origin IN ('Tokyo', 'Paris')
  Flight.query.filter(Flight.origin.in_(["Tokyo", "Paris"])).all()
  # There is an underscore after Flight.origin.in_ because "in" is a Python keyword
  # and the underscore helps to differentiate

# AND & OR are special sqlalchemy syntax need to be imported at the top of file
SELECT * FROM flights WHERE origin = "Paris" AND duration > 500;
  Flight.query.filter(and_(Flight.origin == "Paris", Flight.duration > 500)).all()

SELECT * FROM flights WHERE origin = "Paris" OR duration > 500;
  Flight.query.filter(or_(Flight.origin == "Paris", Flight.duration > 500)).all()

SELECT * FROM flights JOIN passengers ON flights.id = passengers.flight_id;
  db.session.query(Flight, Passenger).filter(Flight.id == Passenger.flight_id).all()

SELECT * FROM passengers WHERE flight_id=1;
  Flight.query.get(1).passengers

SELECT * FROM flights JOIN passengers ON flight.id = passengers.flight_id WHERE passengers.name = 'Alice';
  Passenger.query.filter_by(name="Alice").first().flight
